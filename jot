#!/usr/bin/env ruby
require 'sinatra'
require 'erb'
require 'sqlite3'

def show(template, context = nil)
    # This method wraps whatever other template you want to use inside the
    # standard index HTML boilerplate
    #
    # Call this method like this:
    #
    #   1.) show <templatename(symbol), <localVariable symbol> => <value of local variable>
    #       In the template, refer to your variables using localVariable
    #
    #       See an example in the get '/list' route, using the 'list' template: 
    #           show :list, :jots => @jots
    #   2.) Or, just pass it a string, and it will use that for the content in the regular index template
    if (template.class == String)
        @content = template
        erb :index 
    else
        @content = erb template, :locals => context
        erb :index
    end
end

def get_db
    db = SQLite3::Database.open "jots.db"
    db.results_as_hash = true
    return db
end

get '/db' do
    content = begin
        db = SQLite3::Database.new "jot"
        "DB Version: #{db.get_first_value 'SELECT SQLITE_VERSION()'}"
    rescue SQLite3::Exception => e
        "Exception occurred: #{e}"
    ensure
        db.close if db
    end
    show content
end

get '/' do
    erb :index
end

get '/list' do
    db = get_db
    @jots = db.execute("select id, body from jots");
    erb :list, :locals => { :jots => @jots }
end

get '/create' do
    erb :create
end

get '/menu' do
    erb :menu
end

get '/notify' do
    @message = params['message']
    erb :notify
end

put '/' do
    body = params['body'];
    db = get_db
    begin
        db.execute("insert into Jots (body, created_on, updated_on) values('#{body}', datetime('now'), datetime('now'))")
        "Jot successfully created"
    rescue SQLite3::Exception => e
        "DB Error: #{e}"
    ensure
        db.close if db
    end
end

delete '/' do
    id = params['id']
    db = get_db
    begin
        db.execute("delete from Jots where id = #{id}")
        "Jot deleted"
    rescue SQLite3::Exception => e
        "DB Error: #{e}"
    ensure
        db.close if db
    end
end
